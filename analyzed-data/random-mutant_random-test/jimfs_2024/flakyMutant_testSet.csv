mutant(except tests),round-0,round-1,round-2,round-3,round-4,round-5
"('com.google.common.jimfs.Directory', 'put', '(Lcom/google/common/jimfs/DirectoryEntry;Z)V', '33', 'org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator', 'Directory.java', '7', '215', 'negated conditional')","{130, 132, 135, 140, 141, 15, 144, 25, 26, 153, 156, 27, 30, 159, 160, 32, 158, 36, 165, 168, 44, 48, 49, 186, 189, 196, 68, 200, 201, 74, 75, 204, 76, 78, 79, 82, 213, 87, 88, 92, 93, 94, 353, 227, 101, 102, 103, 362, 107, 108, 111, 242, 115, 116, 117, 118, 374, 120, 122, 123, 125, 255}","{130, 132, 135, 140, 141, 15, 144, 153, 25, 27, 156, 26, 158, 159, 160, 32, 30, 36, 165, 168, 44, 48, 49, 186, 189, 68, 200, 201, 74, 75, 76, 204, 78, 79, 82, 213, 87, 88, 92, 93, 94, 248, 353, 227, 101, 102, 103, 362, 107, 108, 111, 242, 115, 116, 117, 118, 374, 120, 122, 123, 125}","{130, 132, 135, 140, 141, 15, 144, 153, 26, 27, 156, 25, 158, 30, 32, 160, 159, 36, 165, 168, 44, 48, 49, 186, 189, 68, 200, 201, 74, 75, 76, 204, 78, 79, 82, 213, 87, 88, 92, 93, 94, 353, 227, 101, 102, 103, 362, 107, 108, 111, 242, 115, 116, 117, 118, 374, 120, 122, 123, 125}","{130, 132, 135, 140, 141, 15, 144, 146, 153, 25, 27, 26, 156, 158, 159, 160, 32, 30, 36, 165, 168, 44, 48, 49, 186, 189, 68, 200, 201, 74, 75, 76, 204, 78, 79, 82, 213, 87, 88, 120, 93, 94, 92, 353, 227, 101, 102, 103, 362, 107, 108, 111, 242, 115, 116, 117, 118, 374, 248, 122, 123, 125}","{130, 132, 135, 140, 141, 15, 144, 153, 26, 25, 156, 27, 158, 159, 32, 160, 30, 36, 165, 168, 44, 48, 49, 186, 189, 68, 200, 201, 74, 75, 76, 204, 78, 79, 82, 213, 87, 88, 92, 93, 94, 120, 353, 227, 101, 102, 103, 362, 107, 108, 111, 242, 115, 116, 117, 118, 374, 248, 122, 123, 125}","{130, 132, 135, 140, 141, 15, 144, 153, 26, 27, 156, 25, 158, 159, 32, 160, 30, 36, 165, 168, 44, 48, 49, 186, 189, 68, 200, 201, 74, 75, 76, 204, 78, 79, 82, 213, 87, 88, 92, 93, 94, 353, 227, 101, 102, 103, 362, 107, 108, 111, 242, 115, 116, 117, 374, 118, 120, 122, 123, 125}"
"('com.google.common.jimfs.WindowsPathType', 'parsePath', '(Ljava/lang/String;)Lcom/google/common/jimfs/PathType$ParseResult;', '94', 'org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator', 'WindowsPathType.java', '23', '84', 'negated conditional')","{385, 258, 388, 389, 390, 263, 391, 133, 138, 392, 147, 163, 293, 167, 170, 301, 180, 188, 190, 195, 200, 202, 206, 211, 212, 214, 215, 217, 219, 220, 223, 235, 236, 237, 247, 380}","{385, 258, 388, 389, 390, 263, 133, 391, 138, 392, 147, 163, 293, 167, 170, 301, 180, 188, 190, 195, 200, 202, 206, 211, 212, 214, 215, 217, 219, 220, 223, 235, 236, 237, 247, 380}","{385, 258, 388, 133, 390, 391, 389, 392, 138, 263, 147, 163, 293, 167, 170, 301, 180, 188, 190, 195, 200, 202, 206, 211, 212, 214, 215, 217, 219, 220, 223, 235, 236, 237, 247, 380}","{385, 258, 388, 389, 133, 263, 391, 390, 392, 138, 147, 163, 293, 167, 170, 301, 180, 188, 190, 195, 200, 202, 206, 211, 212, 214, 215, 217, 219, 220, 223, 235, 236, 237, 247, 380}",,"{385, 258, 388, 133, 390, 391, 389, 392, 138, 263, 147, 163, 293, 167, 170, 301, 180, 188, 190, 195, 200, 202, 206, 211, 212, 214, 215, 217, 219, 220, 223, 235, 236, 237, 247, 380}"
"('com.google.common.jimfs.WindowsPathType', 'parseDriveRoot', '(Ljava/lang/String;)Ljava/lang/String;', '11', 'org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator', 'WindowsPathType.java', '2', '139', 'negated conditional')","{385, 258, 388, 389, 133, 263, 392, 138, 147, 163, 293, 167, 170, 301, 180, 188, 190, 195, 200, 202, 206, 211, 212, 214, 215, 217, 219, 220, 223, 235, 236, 237, 247, 380}","{385, 258, 388, 389, 133, 263, 392, 138, 147, 163, 293, 167, 170, 301, 180, 188, 190, 195, 200, 202, 206, 211, 212, 214, 215, 217, 219, 220, 223, 235, 236, 237, 247, 380}",,"{385, 258, 388, 389, 133, 263, 392, 138, 147, 163, 293, 167, 170, 301, 180, 188, 190, 195, 200, 202, 206, 211, 212, 214, 215, 217, 219, 220, 223, 235, 236, 237, 247, 380}",,"{385, 258, 388, 133, 389, 263, 392, 138, 147, 163, 293, 167, 170, 301, 180, 188, 190, 195, 200, 202, 206, 211, 212, 214, 215, 217, 219, 220, 223, 235, 236, 237, 247, 380}"
"('com.google.common.jimfs.WindowsPathType', 'parseUriPath', '(Ljava/lang/String;)Lcom/google/common/jimfs/PathType$ParseResult;', '14', 'org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator', 'WindowsPathType.java', '2', '200', 'negated conditional')","{214, 389, 206, 391}","{206, 389, 214, 391}",,"{214, 389, 206, 391}",,
"('com.google.common.jimfs.Configuration', 'forCurrentPlatform', '()Lcom/google/common/jimfs/Configuration;', '31', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'Configuration.java', '10', '213', 'replaced return value with null for com/google/common/jimfs/Configuration::forCurrentPlatform')","{210, 197}","{210, 197}","{210, 197}",,"{210, 197}","{210, 197}"
"('com.google.common.jimfs.Configuration', 'osX', '()Lcom/google/common/jimfs/Configuration;', '4', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'Configuration.java', '1', '134', 'replaced return value with null for com/google/common/jimfs/Configuration::osX')","{154, 383}","{154, 383}","{154, 383}",,"{154, 383}","{154, 383}"
"('com.google.common.jimfs.PathType', 'unix', '()Lcom/google/common/jimfs/PathType;', '4', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'PathType.java', '0', '45', 'replaced return value with null for com/google/common/jimfs/PathType::unix')","{384, 280, 387, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 148, 277, 284, 279, 278, 281, 282, 283, 411, 285, 414, 286, 416, 287, 289, 291, 419, 421, 422, 288, 296, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 290, 292, 193, 293, 295, 297, 276, 241, 377, 378, 379, 380, 381, 382, 383}","{384, 387, 285, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 148, 279, 280, 281, 282, 411, 284, 283, 286, 287, 416, 289, 288, 291, 292, 293, 421, 422, 296, 297, 298, 294, 300, 301, 302, 303, 304, 305, 306, 307, 290, 414, 419, 193, 295, 299, 241, 278, 377, 378, 379, 380, 381, 382, 383}","{384, 387, 281, 264, 265, 266, 267, 268, 269, 270, 286, 272, 273, 274, 275, 148, 277, 278, 276, 280, 279, 282, 283, 284, 285, 414, 411, 288, 289, 416, 419, 292, 421, 291, 295, 296, 293, 298, 299, 300, 301, 422, 303, 304, 305, 306, 302, 290, 287, 307, 193, 294, 271, 297, 241, 377, 378, 379, 380, 381, 382, 383}","{384, 387, 264, 265, 266, 267, 268, 269, 270, 286, 272, 273, 274, 275, 148, 277, 284, 276, 280, 281, 282, 283, 411, 285, 414, 287, 416, 289, 288, 291, 419, 421, 422, 295, 296, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 290, 292, 193, 293, 271, 297, 279, 241, 278, 377, 378, 379, 380, 381, 382, 383}",,"{384, 387, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 148, 277, 278, 276, 280, 281, 282, 283, 411, 285, 414, 284, 416, 289, 290, 419, 292, 421, 294, 295, 286, 291, 298, 299, 300, 301, 422, 303, 304, 305, 306, 288, 302, 307, 287, 193, 293, 296, 297, 279, 241, 377, 378, 379, 380, 381, 382, 383}"
"('com.google.common.jimfs.FileFactory', 'directoryCreator', '()Lcom/google/common/base/Supplier;', '5', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'FileFactory.java', '0', '85', 'replaced return value with null for com/google/common/jimfs/FileFactory::directoryCreator')","{4, 5, 8, 12, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 96, 100, 106, 112, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263}","{4, 5, 8, 12, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 96, 100, 106, 112, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263}","{4, 5, 8, 12, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 96, 100, 106, 112, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263}",,,"{4, 5, 8, 12, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 59, 60, 96, 100, 106, 112, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263}"
"('com.google.common.jimfs.PosixAttributeProvider$Attributes', 'group', '()Ljava/nio/file/attribute/GroupPrincipal;', '5', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'PosixAttributeProvider.java', '0', '261', 'replaced return value with null for com/google/common/jimfs/PosixAttributeProvider$Attributes::group')","{354, 335}","{354, 335}","{354, 335}",,"{354, 335}","{354, 335}"
"('com.google.common.jimfs.PosixAttributeProvider$Attributes', 'permissions', '()Lcom/google/common/collect/ImmutableSet;', '5', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'PosixAttributeProvider.java', '0', '266', 'replaced return value with null for com/google/common/jimfs/PosixAttributeProvider$Attributes::permissions')","{354, 335}","{354, 335}","{354, 335}",,"{354, 335}","{354, 335}"
"('com.google.common.jimfs.PosixAttributeProvider$Attributes', 'owner', '()Ljava/nio/file/attribute/UserPrincipal;', '5', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'PosixAttributeProvider.java', '0', '256', 'replaced return value with null for com/google/common/jimfs/PosixAttributeProvider$Attributes::owner')",{335},{335},{335},,{335},{335}
"('com.google.common.jimfs.GlobToRegex$2', 'process', '(Lcom/google/common/jimfs/GlobToRegex;C)V', '5', 'org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator', 'GlobToRegex.java', '0', '253', 'removed call to com/google/common/jimfs/GlobToRegex::access$900')","{406, 211, 408, 398}","{408, 406, 211, 398}","{408, 406, 211, 398}","{406, 211, 408, 398}",,"{408, 406, 211, 398}"
"('com.google.common.jimfs.GlobToRegex$2', 'process', '(Lcom/google/common/jimfs/GlobToRegex;C)V', '9', 'org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator', 'GlobToRegex.java', '1', '254', 'removed call to com/google/common/jimfs/GlobToRegex::access$1000')","{408, 406, 211, 398}","{408, 406, 211, 398}","{408, 398, 406, 211}","{408, 406, 211, 398}",,"{408, 398, 406, 211}"
"('com.google.common.jimfs.JimfsSecureDirectoryStream$2', 'lookup', '()Lcom/google/common/jimfs/File;', '20', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'JimfsSecureDirectoryStream.java', '5', '204', 'replaced return value with null for com/google/common/jimfs/JimfsSecureDirectoryStream$2::lookup')",{15},{15},,{15},{15},{15}
"('com.google.common.jimfs.JimfsSecureDirectoryStream$2', 'lookup', '()Lcom/google/common/jimfs/File;', '5', 'org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator', 'JimfsSecureDirectoryStream.java', '0', '203', 'removed call to com/google/common/jimfs/JimfsSecureDirectoryStream::checkOpen')","{182, 15}","{182, 15}",,"{182, 15}","{182, 15}","{182, 15}"
"('com.google.common.jimfs.JimfsFileSystem$1', 'close', '()V', '6', 'org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator', 'JimfsFileSystem.java', '1', '311', 'removed call to java/util/concurrent/ExecutorService::shutdown')",{145},{145},{145},{145},{145},
"('com.google.common.jimfs.PosixAttributeProvider', 'readAttributes', '(Lcom/google/common/jimfs/File;)Ljava/nio/file/attribute/PosixFileAttributes;', '7', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'PosixAttributeProvider.java', '1', '185', 'replaced return value with null for com/google/common/jimfs/PosixAttributeProvider::readAttributes')",,{354},{354},{354},{354},{354}
"('com.google.common.jimfs.PosixAttributeProvider', 'defaultValues', '(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;', '68', 'org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator', 'PosixAttributeProvider.java', '18', '94', 'negated conditional')",,"{4, 5, 12, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 100, 106, 112, 132, 135, 136, 139, 140, 141, 142, 143, 144, 148, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 168, 169, 171, 173, 174, 175, 177, 179, 182, 184, 186, 187, 189, 192, 198, 199, 201, 204, 205, 207, 208, 209, 213, 216, 225, 226, 227, 228, 231, 232, 234, 239, 242, 243, 244, 245, 246, 249, 250, 251, 252, 256, 257, 259, 260, 335, 339, 345, 348, 354, 368, 375}","{4, 5, 12, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 100, 106, 112, 132, 135, 136, 139, 140, 141, 142, 143, 144, 148, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 168, 169, 171, 173, 174, 175, 177, 179, 182, 184, 186, 187, 189, 192, 198, 199, 201, 204, 205, 207, 208, 209, 213, 216, 225, 226, 227, 228, 231, 232, 234, 239, 242, 243, 244, 245, 246, 249, 250, 251, 252, 256, 257, 259, 260, 335, 339, 345, 348, 354, 368, 375}","{4, 5, 12, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 100, 106, 112, 132, 135, 136, 139, 140, 141, 142, 143, 144, 148, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 168, 169, 171, 173, 174, 175, 177, 179, 182, 184, 186, 187, 189, 192, 198, 199, 201, 204, 205, 207, 208, 209, 213, 216, 225, 226, 227, 228, 231, 232, 234, 239, 242, 243, 244, 245, 246, 249, 250, 251, 252, 256, 257, 259, 260, 335, 339, 345, 348, 354, 368, 375}","{4, 5, 12, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 100, 106, 112, 132, 135, 136, 139, 140, 141, 142, 143, 144, 148, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 168, 169, 171, 173, 174, 175, 177, 179, 182, 184, 186, 187, 189, 192, 198, 199, 201, 204, 205, 207, 208, 209, 213, 216, 225, 226, 227, 228, 231, 232, 234, 239, 242, 243, 244, 245, 246, 249, 250, 251, 252, 256, 257, 259, 260, 335, 339, 345, 348, 354, 368, 375}","{4, 5, 12, 15, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 100, 106, 112, 132, 135, 136, 139, 140, 141, 142, 143, 144, 148, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 168, 169, 171, 173, 174, 175, 177, 179, 182, 184, 186, 187, 189, 192, 198, 199, 201, 204, 205, 207, 208, 209, 213, 216, 225, 226, 227, 228, 231, 232, 234, 239, 242, 243, 244, 245, 246, 249, 250, 251, 252, 256, 257, 259, 260, 335, 339, 345, 348, 354, 368, 375}"
"('com.google.common.jimfs.JimfsFileChannel$FakeFileLock', 'release', '()V', '6', 'org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator', 'JimfsFileChannel.java', '0', '675', 'removed call to java/util/concurrent/atomic/AtomicBoolean::set')",,{72},,,{72},{72}
"('com.google.common.jimfs.JimfsFileChannel$FakeFileLock', 'isValid', '()Z', '6', 'org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanFalseReturnValsMutator', 'JimfsFileChannel.java', '1', '670', 'replaced boolean return with false for com/google/common/jimfs/JimfsFileChannel$FakeFileLock::isValid')",,{72},,,{72},{72}
"('com.google.common.jimfs.JimfsFileChannel$FakeFileLock', 'isValid', '()Z', '6', 'org.pitest.mutationtest.engine.gregor.mutators.returns.BooleanTrueReturnValsMutator', 'JimfsFileChannel.java', '1', '670', 'replaced boolean return with true for com/google/common/jimfs/JimfsFileChannel$FakeFileLock::isValid')",,{72},,,{72},{72}
"('com.google.common.jimfs.PathNormalization$4', 'apply', '(Ljava/lang/String;)Ljava/lang/String;', '7', 'org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator', 'PathNormalization.java', '1', '76', 'replaced return value with """" for com/google/common/jimfs/PathNormalization$4::apply')",,"{450, 453, 456, 361, 148, 372, 124}","{450, 453, 456, 361, 148, 372, 124}","{450, 453, 456, 361, 372, 148, 124}","{450, 453, 456, 361, 148, 372, 124}","{450, 453, 456, 361, 148, 372, 124}"
"('com.google.common.jimfs.JimfsAsynchronousFileChannel$1', 'call', '()Ljava/nio/channels/FileLock;', '12', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'JimfsAsynchronousFileChannel.java', '1', '104', 'replaced return value with null for com/google/common/jimfs/JimfsAsynchronousFileChannel$1::call')",,{3},{3},{3},,
"('com.google.common.jimfs.JimfsAsynchronousFileChannel$3', 'call', '()Ljava/lang/Integer;', '12', 'org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator', 'JimfsAsynchronousFileChannel.java', '3', '168', 'replaced Integer return value with 0 for com/google/common/jimfs/JimfsAsynchronousFileChannel$3::call')",,{3},,,,
"('com.google.common.jimfs.JimfsAsynchronousFileChannel$2', 'call', '()Ljava/lang/Integer;', '12', 'org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator', 'JimfsAsynchronousFileChannel.java', '3', '143', 'replaced Integer return value with 0 for com/google/common/jimfs/JimfsAsynchronousFileChannel$2::call')",,{3},{3},{3},,
"('com.google.common.jimfs.PathType', 'windows', '()Lcom/google/common/jimfs/PathType;', '4', 'org.pitest.mutationtest.engine.gregor.mutators.returns.NullReturnValsMutator', 'PathType.java', '0', '68', 'replaced return value with null for com/google/common/jimfs/PathType::windows')",,,,"{387, 388, 293, 390, 391, 392, 393, 394, 395, 396, 397, 301, 389, 220, 410, 379, 380}",,
